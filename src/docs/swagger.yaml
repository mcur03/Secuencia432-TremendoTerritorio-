openapi: 3.0.0
info:
  title: Tremendo Territorio Auth API
  version: 1.0.0
  description: Documentación de los endpoints de Tremendo Territori

servers:
  - url: http://localhost:10101/api
    description: Servidor local
  - url: https://secuencia432-tremendoterritorio-production.up.railway.app/api
    description: Servidor de producción

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
# Login
  /auth/login/start:
    post:
      tags:
        - Login
      summary: Iniciar login solicitando las imágenes de autenticación
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pin
              properties:
                pin:
                  type: string
                  example: "1234"
      responses:
        '200':
          description: Lista de imágenes incluyendo la del usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  images:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        cloudinary_url:
                          type: string
        '400':
          description: Usuario no encontrado o error de validación

  /auth/login/complete:
    post:
      tags:
        - Login
      summary: Completar login seleccionando imagen y digitando PIN
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - selectedImageId
                - pin
              properties:
                selectedImageId:
                  type: integer
                  example: 1
                pin:
                  type: string
                  example: "1234"
      responses:
        '200':
          description: Login exitoso, token generado
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
            description: PIN o imagen incorrecta, o usuario bloqueado
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      description: Mensaje de confirmación.
                      example: "PIN o imagen incorrecta, o usuario bloqueado"

# Registro de Usuario
  /register/get-images:
    get:
      tags:
        - Usuario
      summary: Obtener imágenes aleatorias disponibles para selección
      description: Retorna 3 imágenes que aún no están asignadas a ningún usuario.
      responses:
        '200':
          description: Lista de imágenes disponibles
          content:
            application/json:
              schema:
                type: object
                properties:
                  images:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 5
                        cloudinary_url:
                          type: string
                          example: https://res.cloudinary.com/demo/image/upload/sample.jpg
        '500':
          description: Error del servidor
  /register:
    post:
      tags:
        - Usuario
      summary: Registrar un nuevo usuario
      description: Registra un usuario nuevo con nombre de usuario, email, PIN y una imagen no usada.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nombre
                - apellido
                - email
                - cedula
                - telefono
                - selectedImageId
                - rol
              properties:
                nombre:
                  type: string
                  example: Camila
                apellido:
                  type: string
                  example: "Uribe"
                email:
                  type: string
                  format: email
                  example: camila01@email.com
                cedula:
                  type: string
                  example: "1234567890"
                telefono:
                  type: string
                  example: "3001234567"
                selectedImageId:
                  type: integer
                  example: 2
                rol:
                  type: string
                  example: "usuariofinal"
      responses:
        '201':
          description: Usuario registrado con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Usuario registrado con éxito
        '400':
          description: Error de validación o imagen ya usada
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: La imagen ya está asociada a otro usuario

# Registro de Fincas
  /register-farm:
    post:
      security:
        - bearerAuth: []
      tags:
        - Fincas
      summary: Registrar una nueva finca
      description: Registra una nueva finca con los datos proporcionados.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - farmName
              properties:
                userId:
                  type: integer
                  example: 1
                farmName:
                  type: string
                  example: "Finca La Esperanza"
                history:
                  type: string
                  example: "Historia de la finca"
                location:
                  type: string
                  example: "Ubicación de la finca"
                description:
                  type: string
                  example: "Descripción de la finca"
      responses:
        '201':
          description: Finca registrada con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Finca registrada con éxito
        '400':
          description: Error de validación
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error de validación"

# Actualizar Finca
  /update-farm/{id}:
    put:
      security:
        - bearerAuth: []
      tags:
        - Fincas
      summary: Actualizar una finca existente
      description: Actualiza los datos de una finca existente identificada por su ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de la finca a actualizar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - farmName
              properties:
                farmName:
                  type: string
                  example: "Finca La Esperanza Actualizada"
                history:
                  type: string
                  example: "Historia actualizada de la finca"
                location:
                  type: string
                  example: "Ubicación actualizada de la finca"
                description:
                  type: string
                  example: "Descripción actualizada de la finca"
      responses:
        '200':
          description: Finca actualizada con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Finca actualizada con éxito
        '400':
          description: Error de validación o finca no encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error de validación o finca no encontrada"